---
title: "Steam_Tidy"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(dplyr)
library(readr)
library(tibble)
library(stringr)
library(ggplot2)
Games_Tidy <- read_csv("https://raw.githubusercontent.com/Jtsilva26/GameDataAnalysis/main/Games.csv", show_col_types=FALSE)
Dev_Tidy <- read_csv("https://raw.githubusercontent.com/Jtsilva26/GameDataAnalysis/main/Developer.csv", show_col_types=FALSE)
steam <- read_csv("https://raw.githubusercontent.com/Jtsilva26/GameDataAnalysis/main/steam.csv", col_types = cols(my_date = col_date(format = "%Y-%m-%d")))
```

## Convert Numerical Values Function

```{r}
# Function to convert abbreviated revenue to numerical values
convert_revenue <- function(revenue) {
  # If the revenue contains 'm' (million), remove 'm' and multiply by 1,000,000
  if (grepl("m", revenue, fixed = TRUE)) {
    revenue <- as.numeric(gsub("[^0-9.]", "", revenue)) * 1000000
  }
  # If the revenue contains 'b' (billion), remove 'b' and multiply by 1,000,000,000
  else if (grepl("b", revenue, fixed = TRUE)) {
    revenue <- as.numeric(gsub("[^0-9.]", "", revenue)) * 1000000000
  }
  # If the revenue contains 'k' (thousand), remove 'k' and multiply by 1,000
  else if (grepl("k", revenue, fixed = TRUE)) {
    revenue <- as.numeric(gsub("[^0-9.]", "", revenue)) * 1000
  } else {
    revenue <- as.numeric(gsub("[^0-9.]", "", revenue))
  }
  return(revenue)
}
```

## Removing Commas and Semi-colons Function

```{r}
split_genres_games <- function(genre_string_games) {
  genre_list_games <- unlist(strsplit(genre_string_games, ", "))
  return(genre_list_games)
}

split_genres_steam <- function(genre_string_steam) {
  genre_list_steam <- unlist(strsplit(genre_string_steam, ";"))
  return(genre_list_steam)
}
```

## Filter Function

```{r}
DS_GetAllOf <- function(data, col_name, search_val) {
  desired_rows <- which(sapply(data[[col_name]], function(x) search_val %in% x[[1]]))
  return(data[desired_rows,])
}
```

## Tiding the Games dataset

```{r}
# Apply the function to the 'reviews' column in the 'Games' data frame
Games_Tidy$Reviews <- sapply(Games_Tidy$Reviews, convert_revenue)
Games_Tidy$`Est. Units Sold` <- sapply(Games_Tidy$`Est. Units Sold`, convert_revenue)
Games_Tidy$Followers <- sapply(Games_Tidy$Followers, convert_revenue)
Games_Tidy$`Est. Revenue` <- sapply(Games_Tidy$`Est. Revenue`, convert_revenue)

# Remove the 'review_numeric' column if you no longer need it
Games_Tidy$review_numeric <- NULL
Games_Tidy$follower_numeric <- NULL
Games_Tidy$units_sold <- NULL
Games_Tidy$revenue <- NULL

# Apply the function to create a list of genres
Games_Tidy$Genres <- lapply(Games_Tidy$Genres, split_genres_games)

Games_Tidy$Developers <- lapply(Games_Tidy$Developers, split_genres_games)

Games_Tidy$Publishers <- lapply(Games_Tidy$Publishers, split_genres_games)

Games_Tidy$`Publisher Class` <- lapply(Games_Tidy$`Publisher Class`, split_genres_games)

# Rearrange the date values in the dataset
Games_Tidy$`First Released` <- as.Date(Games_Tidy$`First Released`, format = "%b %d, %Y")

# Converts all FREE values in price to 0.00
Games_Tidy$Price[Games_Tidy$Price == "Free"] <- "$0.00"

# Removes dollar sign and converts them to doubles
Games_Tidy$Price <- as.numeric(gsub("\\$", "", Games_Tidy$Price))

# Now, the 'Reviews' column contains the converted values
print(Games_Tidy)
```

## Tiding the Devs dataset

```{r}
Dev_Tidy$`Total revenue` <- sapply(Dev_Tidy$`Total revenue`, convert_revenue)
Dev_Tidy$`Avg revenue per game` <- sapply(Dev_Tidy$`Avg revenue per game`, convert_revenue)

print(Dev_Tidy)
```

## Tiding the Steam Dataset

```{r}
# Apply the function to create a list of genres
steam$genres <- sapply(steam$genres,split_genres_steam)

steam$steamspy_tags <- sapply(steam$steamspy_tags,split_genres_steam)

steam$categories <- sapply(steam$categories, split_genres_steam)

steam$platforms <- sapply(steam$platforms, split_genres_steam)

steam$developer <- sapply(steam$developer, split_genres_steam)

steam$publisher <- sapply(steam$publisher, split_genres_steam)

# Access the third element (Multiplayer) in the split data
desired_element <- steam$genres

print(steam)
```

## Bar Chart for Avg Estimated Revenue of all Genres

```{r}
my_genre_list <- c("Action", "Adventure", "Casual", "Early Access", "Free to Play", "Indie", "MMO", "Racing","RPG", "Simulation", "Sports","Strategy", "Valve")
colors <- c("red", "green", "blue", "yellow", "orange", "purple", "pink", "skyblue", "coral", "gold", "seagreen", "turquoise", "brown", "gray", "ivory")

genre_colors <- setNames(colors, my_genre_list)


# Initialize an empty list to store genre revenues
genre_revenues <- list()

# Loop through each genre and calculate the mean revenue
for (genre in my_genre_list) {
  # Get revenue for the current genre
  genre_revenues[[genre]] <- mean(DS_GetAllOf(Games_Tidy, "Genres", genre)$`Est. Revenue`)
}

# Convert the list of revenues to a data frame
revenue_data <- data.frame(
  Genre = names(genre_revenues),
  Revenue = unlist(genre_revenues)
)

# Create a bar chart using ggplot with mapped colors
ggplot(revenue_data, aes(x = reorder(Genre, Revenue), y = Revenue, fill = Genre)) +
  geom_bar(stat = "identity", alpha = 0.9) +
  geom_text(aes(label = Revenue), vjust = -0.5, size = 2, color = "black") +
  labs(title = "Avg Estimated Revenue by Genre", x = "Genre", y = "Revenue") +
  scale_fill_manual(values = genre_colors) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(labels = scales::comma)
```

## Bar Chart for Count of games in all Genres

```{r}
genre_counts <- list()

# Loop through each genre and calculate the count of games
for (genre in my_genre_list) {
  # Get count for the current genre
  genre_counts[[genre]] <- nrow(DS_GetAllOf(Games_Tidy, "Genres", genre))
}

# Convert the list of revenues to a data frame
count_data <- data.frame(
  Genre = names(genre_counts),
  Gamecount = unlist(genre_counts)
)

# Create a bar chart using ggplot with mapped colors
ggplot(count_data, aes(x = reorder(Genre, Gamecount), y = Gamecount, fill = Genre)) +
  geom_bar(stat = "identity", alpha = 0.9) +
  geom_text(aes(label = Gamecount), vjust = -0.5, size = 3, color = "black") +
  labs(title = "Count of Games", x = "Genre", y = "Count") +
  scale_fill_manual(values = genre_colors) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Games Released per year by Genre

```{r}
# Create and display separate histograms for each genre in your list
for (genre in my_genre_list) {
  # Filter data for the current genre
  genre_subset <- DS_GetAllOf(Games_Tidy, "Genres", genre)
  genre_subset <- genre_subset %>%
    mutate(year = format(`First Released`, "%Y"))
  
  # Create a histogram for the current genre with unique color
  p <- ggplot(genre_subset, aes(x = year)) +
    geom_bar(stat = "count", fill = genre_colors[genre], color = "black") +
    labs(x = "Years", y = "Count", title = paste("Count of Games per year for", genre)) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 3)
  
  # Print the plot (display in R environment)
  print(p)
}
```
